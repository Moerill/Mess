{"version":3,"sources":["webpack:///./src/scripts/actor-item-sort-btn.js"],"names":["async","addAlphabeticalSorter","app","html","data","actor","_id","querySelectorAll","forEach","el","type","closest","dataset","tab","btn","document","createElement","innerHTML","classList","add","title","style","flex","margin","addEventListener","ev","lists","actorId","fromUuid","concatList","map","e","items","spells","flat","sort","a","b","name","siblings","shift","sortUpdates","length","push","SortingHelpers","performIntegerSort","target","duplicate","sortBefore","updateData","u","update","updateEmbeddedEntity","sortItemListAlphabetically","prepend","itemSortBtn","Hooks","on"],"mappings":";;;;6DAwBAA,eAAeC,EAAsBC,EAAKC,EAAMC,GAC/C,IAAKA,EAAKC,MAAMC,IAAK,OACNH,EAAKI,iBAAiB,gBAE9BC,QAAQC,IACd,MAAMC,EAAOD,EAAGE,QAAQ,QAAQC,QAAQC,IAClCC,EAAMC,SAASC,cAAc,KACnCF,EAAIG,UAAY,8BAChBH,EAAII,UAAUC,IAAI,iBAClBL,EAAIM,MAAQ,QAAQV,oBACpBI,EAAIO,MAAMC,KAAO,EACjBR,EAAIO,MAAME,OAAS,YACnBT,EAAIU,iBAAiB,QAAUC,GApCjCzB,eAA0C0B,EAAOC,GAChD,MAAMtB,QAAcuB,SAAS,SAASD,GACtC,IAAIE,EAAaH,EAAMI,IAAIC,GAAKA,EAAEC,OAASD,EAAEE,QAAQC,OACrDL,EAAWM,MAAK,SAAUC,EAAGC,GAC5B,OAAID,EAAEE,KAAOD,EAAEC,MAAc,EACzBF,EAAEE,KAAOD,EAAEC,KAAa,EACrB,KAER,IAAIC,EAAW,CAACV,EAAWW,SACvBC,EAAc,GAClB,KAAOZ,EAAWa,OAAS,EAAGH,EAASI,KAAKd,EAAWW,SACtDC,EAAeG,eAAeC,mBAAmBhB,EAAW,GAAI,CAC/DiB,OAAQP,EAASA,EAASG,OAAO,GACjCH,SAAUQ,UAAUR,GACpBS,YAAY,IAEd,MAAMC,EAAaR,EAAYX,IAAIoB,IAClC,IAAIC,EAASD,EAAEC,OAEf,OADAA,EAAO7C,IAAM4C,EAAEJ,OAAOxC,IACf6C,IAER9C,EAAM+C,qBAAqB,YAAaH,GAeDI,CAA2BjD,EAAKM,GAAON,EAAKC,MAAMC,MACxFG,EAAG6C,QAAQxC,KAIEd,eAAeuD,IAC7BC,MAAMC,GAAG,mBAAoB,CAACvD,EAAKC,EAAMC,KACxCH,EAAsBC,EAAKC,EAAK,GAAIC,KA3CtC","file":"bundles/item-sort-btns.1907.js","sourcesContent":["async function sortItemListAlphabetically(lists, actorId) {\n\tconst actor = await fromUuid(`Actor.${actorId}`);\n\tlet concatList = lists.map(e => e.items || e.spells).flat();\n\tconcatList.sort(function (a, b) {\n\t\tif (a.name < b.name) return -1;\n\t\tif (a.name > b.name) return 1;\n\t\treturn 0;\n\t});\n\tlet siblings = [concatList.shift()];\n\tlet sortUpdates = [];\n\tfor (; concatList.length > 0; siblings.push(concatList.shift())) {\n\t\tsortUpdates = (SortingHelpers.performIntegerSort(concatList[0], {\n\t\t\ttarget: siblings[siblings.length-1], \n\t\t\tsiblings: duplicate(siblings),\n\t\t\tsortBefore: false}));\t\t\n\t}\n\tconst updateData = sortUpdates.map(u => {\n\t\tlet update = u.update;\n\t\tupdate._id = u.target._id;\n\t\treturn update;\n\t})\n\tactor.updateEmbeddedEntity('OwnedItem', updateData);\n}\n\nasync function addAlphabeticalSorter(app, html, data) {\n\tif (!data.actor._id) return;\n\tconst header = html.querySelectorAll('.filter-list');\n\n\theader.forEach(el => {\n\t\tconst type = el.closest('.tab').dataset.tab;\n\t\tconst btn = document.createElement('a');\n\t\tbtn.innerHTML = '<i class=\"fas fa-sort\"></i>';\n\t\tbtn.classList.add('mess-sort-btn');\n\t\tbtn.title = `Sort ${type} alphabetically.`;\n\t\tbtn.style.flex = 0;\n\t\tbtn.style.margin = \"0 5px 0 0\";\n\t\tbtn.addEventListener('click',\t(ev) => sortItemListAlphabetically(data[type], data.actor._id))\n\t\tel.prepend(btn);\n\t});\n}\n\nexport default async function itemSortBtn() {\n\tHooks.on('renderActorSheet', (app, html, data) => {\n\t\taddAlphabeticalSorter(app, html[0], data);\n\t});\n}"],"sourceRoot":""}